name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        run-build: true
        run-test: false

    - name: Install GNU Arm Embedded Toolchain - latest
      uses: carlosperate/arm-none-eabi-gcc-action@v1.8.1

    - name: act sudo setup
      if: env.ACT=='true'
      run: apt-get update && apt-get -y install sudo cmake make g++

    - name: Print out programs invoked by the compiler
      run: arm-none-eabi-gcc -v

    - name: Configure Project
      uses: threeal/cmake-action@v1.3.0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=cmake/arm-none-eabi-gcc.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      